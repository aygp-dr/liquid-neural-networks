#+TITLE: Liquid Neural Networks
#+AUTHOR: Aidan Pace
#+DATE: 2025-01-17
#+PROPERTY: header-args :tangle yes
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args :comments link
#+OPTIONS: toc:2 num:nil ^:nil

[[https://github.com/aygp-dr/liquid-neural-networks/blob/main/LICENSE][https://img.shields.io/badge/license-MIT-blue.svg]]
[[https://github.com/aygp-dr/liquid-neural-networks][https://img.shields.io/badge/python-3.9+-blue.svg]]
[[https://github.com/aygp-dr/liquid-neural-networks][https://img.shields.io/badge/clojure-1.11+-blue.svg]]
[[https://github.com/aygp-dr/liquid-neural-networks][https://img.shields.io/github/languages/top/aygp-dr/liquid-neural-networks]]
[[https://github.com/aygp-dr/liquid-neural-networks][https://img.shields.io/github/repo-size/aygp-dr/liquid-neural-networks]]
[[https://github.com/aygp-dr/liquid-neural-networks/commits/main][https://img.shields.io/github/last-commit/aygp-dr/liquid-neural-networks]]
[[https://github.com/aygp-dr/liquid-neural-networks/issues][https://img.shields.io/github/issues/aygp-dr/liquid-neural-networks]]

* Overview

A hybrid Python/Clojure implementation of Liquid Neural Networks (LNNs) - continuous-time neural architectures inspired by biological neurons in C. elegans. This project provides parameter-efficient AI models that can solve complex tasks with as few as 19-302 neurons, offering superior interpretability and real-time adaptation capabilities.

* Setup

** Python (using uv)

#+begin_src bash :tangle no
uv venv
source .venv/bin/activate  # On Unix/macOS
# or
.venv\Scripts\activate  # On Windows
uv pip install -e .
#+end_src

** Clojure

#+begin_src bash :tangle no
# Run REPL
clojure -M:dev

# Run tests
clojure -M:test

# Run main
clojure -M -m liquid-neural-networks.core
#+end_src

* Project Structure

- =src/= - Python source code
- =src/clj/= - Clojure source code
- =test/= - Tests for both languages
- =resources/= - Shared resources

* Configuration Files

** Python Project Configuration (pyproject.toml)

#+begin_src toml :tangle pyproject.toml
[project]
name = "liquid-neural-networks"
version = "0.1.0"
description = "Add your description here"
readme = "README.org"
requires-python = ">=3.12"
dependencies = []
#+end_src

** Clojure Dependencies (deps.edn)

#+begin_src clojure :tangle deps.edn
{:paths ["src/clj" "resources"]
 :deps {org.clojure/clojure {:mvn/version "1.11.1"}
        org.clojure/core.async {:mvn/version "1.6.681"}
        org.clojure/data.json {:mvn/version "2.4.0"}}
 :aliases
 {:dev {:extra-paths ["dev" "test"]
        :extra-deps {nrepl/nrepl {:mvn/version "1.0.0"}
                     cider/cider-nrepl {:mvn/version "0.30.0"}}}
  :test {:extra-paths ["test"]
         :extra-deps {lambdaisland/kaocha {:mvn/version "1.87.1366"}}
         :main-opts ["-m" "kaocha.runner"]}
  :build {:deps {io.github.clojure/tools.build {:mvn/version "0.9.6"}}
          :ns-default build}}}
#+end_src

** Git Ignore Configuration

#+begin_src gitignore :tangle .gitignore
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
.venv
.uv/
*.egg-info/
dist/
build/

# Clojure
/target
/classes
/checkouts
profiles.clj
pom.xml
pom.xml.asc
*.jar
*.class
/.lein-*
/.nrepl-port
/.cpcache
/.clj-kondo
/.lsp

# IDE
.idea/
*.iml
.vscode/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db
#+end_src

* Source Code

** Clojure Core Module

#+begin_src clojure :tangle src/clj/liquid_neural_networks/core.clj
(ns liquid-neural-networks.core)

(defn greet
  "Returns a greeting message"
  [name]
  (str "Hello, " name "! Welcome to Liquid Neural Networks."))

(defn -main
  "Main entry point"
  [& args]
  (println (greet (or (first args) "World"))))
#+end_src

** Python Module

#+begin_src python :tangle src/liquid_neural_networks/__init__.py
"""Liquid Neural Networks - A Python/Clojure hybrid implementation."""

__version__ = "0.1.0"
#+end_src

#+begin_src python :tangle src/liquid_neural_networks/core.py
"""Core module for Liquid Neural Networks."""


def greet(name: str = "World") -> str:
    """Return a greeting message.
    
    Args:
        name: Name to greet
        
    Returns:
        Greeting message
    """
    return f"Hello, {name}! Welcome to Liquid Neural Networks."


def main() -> None:
    """Main entry point."""
    import sys
    name = sys.argv[1] if len(sys.argv) > 1 else "World"
    print(greet(name))


if __name__ == "__main__":
    main()
#+end_src

* License

This project is licensed under the MIT License - see below for details:

#+begin_src text :tangle LICENSE
MIT License

Copyright (c) 2025 Aidan Pace

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
#+end_src